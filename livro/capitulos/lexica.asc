== Análise Léxica

.Objetivos do capítulo
____________________
Ao final deste capítulo você deverá ser capaz de:

* objetivo 1
* objetivo 2
* objetivo N
____________________

A análise léxica é a primeira etapa do compilador, e recebe o arquivo de 
entrada criado pelo usuário. O arquivo de entrada é geralmente armazenado 
como uma sequência de caracteres individuais que podem ser lidos. A análise 
léxica tem como função agrupar os caracteres individuais em _tokens_, que 
são as menores unidades com significado no programa-fonte. Um _token_ pode 
ser pensado como sendo similar a uma palavra. 

Podemos fazer uma analogia do processo de análise do compilador com o ato 
de ler um texto. Na leitura, nós não lemos e decodificamos individualmente 
cada letra; nosso cérebro lê e processa um texto uma palavra por vez. Isso 
é comprovado pelo fato que conseguimos entender um texto mesmo que as 
palavras tenham erros de ortografia ou mesmo sejam escritas de maneira 
diferente. 

A análise léxica faz com que as etapas seguintes do compilador possam 
trabalhar no nível das palavras, ao invés do nível dos caracteres 
individuais. Isso facilita bastante o trabalho das etapas posteriores. 
Na análise léxica também são realizadas algumas tarefas como remover 
comentários dos arquivos do programa-fonte e registrar em uma tabela
os nomes de identificadores usados no programa. Os detalhes de como 
isso é feito são o tópico deste capítulo. 

=== O Funcionamento da Análise Léxica

Como vimos, a análise léxica agrupa os caracteres do arquivo de entrada 
(que contém o programa-fonte) em _tokens_. Um _token_ é similar a uma 
palavra do texto de entrada e é composto por duas partes:

* um _tipo_;
* um _valor_ opcional. 

O tipo indica que espécie de ``palavra'' o _token_ representa: um número, 
um sinal de pontuação, um identificador (nome de variável ou função), etc. 
O valor é usado em alguns tipos de _tokens_ para armazenar alguma informação 
adicional necessária. 

Alguns exemplos vão deixar essas ideias mais claras. Vamos começar com uma 
linguagem simples para expressões aritméticas com operandos constantes, 
uma linguagem "de calculadora". Na linguagem são permitidos números inteiros 
(positivos ou negativos), parênteses, e as quatro operações aritméticas básicas, 
representadas pelos caracteres usuais:

* soma `+`
* subtração +-+
* multiplicação +*+
* divisão +/+

Os tipos de tokens são: número, operador e pontuação (para representar os 
parênteses). 

=== Geradores de Analisadores Léxicos

Entrada e saída. 

=== Expressões Regulares

Revisão sobre ERs. 

=== Uso do flex

Formato da entrada, etc. 

