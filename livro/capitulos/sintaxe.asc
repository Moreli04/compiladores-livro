== Análise Sintática

.Objetivos do capítulo
____________________
Ao final deste capítulo você deverá ser capaz de:

* objetivo 1
* objetivo 2
* objetivo N
____________________

A análise sintática é a etapa do compilador que ocorre após a análise léxica. 
O objetivo da análise sintática é determinar a estrutura sintática do 
código-fonte que está sendo compilado. Para isso, a análise sintática 
utiliza o fluxo de __tokens__ produzido pela análise léxica. 

No capítulo anterior mencionamos uma analogia entre compilação de um programa 
e leitura de um texto. Vimos que a análise léxica pode ser entendida como o 
agrupamento de letras individuais em palavras. Já a análise sintática é 
similar ao agrupamento de palavras para formar frases. Quando lemos, nosso 
cérebro determina automaticamente a estrutura sintática das frases, pois 
entender essa estrutura (mesmo que apenas intuitivamente) é necessário para 
compreender o significado da frase: quem é o sujeito (quem realiza a ação), 
quem é o objeto (quem sofre a ação), etc. A análise sintática em um compilador 
faz o mesmo tipo de tarefa, mas determinando a estrutura do código-fonte 
que está sendo compilado. 

Neste capítulo vamos entender em mais detalhes a função do analisador sintático 
e como ele funciona. Assim como usamos o formalismo das expressões regulares 
para guiar a criação do analisador léxico, veremos o uso das __Gramáticas Livres 
de Contexto__ para guiar a criação de analisadores sintáticos. Também veremos 
como usar o gerador bison como uma ferramenta para ajudar na criação do 
analisador sintático (assim como usamos o flex para a análise léxica).

=== Estrutura sintática

A estrutura sintática de um programa relaciona cada parte do programa com suas 
sub-partes componentes. Por exemplo, um comando +if+ completo tem três partes 
que o compõem: uma condição de teste, um comando para executar caso a condição 
seja verdadeira, e um comando para excutar caso a condição seja falsa. Quando 
o compilador identifica um +if+ em um programa, é importante que ele possa 
acessar esses componentes para poder gerar código executável para o +if+. Por 
isso, não basta apenas agrupar os caracteres em __tokens__, é preciso também 
agrupar os __tokens__ em estruturas sintáticas. 

Uma forma comum de representar a estrutura sintática é usando árvores. As 
árvores na ciência da computação são normalmente desenhadas de cabeça para 
baixo, com a raiz no topo. A raiz é um nó da árvore da qual todo o resto 
se origina. Cada nó pode ter nós filhos que aparecem abaixo dele, ligados 
por um __arco__ ou __aresta__. Uma árvore que representa a estrutura 
sintática de um programa é normalmente chamada de __árvore sintática__. 
Para o exemplo do comando condicional 
mencionado antes, a árvore sintática seria similar à mostrada na 
Figura <<arvif1>>. Como filhos do nó +if+ (a raiz) existem três 
nós, o primeiro representando a condição, o segundo o comando para 
o caso da condição ser verdadeira (C1) e o terceiro representando 
o comando para o caso da condição ser falsa (C2). 

[[arvif1]]
.Árvore sintática para o comando condicional completo.
image::images/sintatica/arvif1.png[scaledwidth="75%"]



=== Relação com o Analisador Léxico

Pega próximo token. 

=== Geradores de Analisadores Sintáticos

Gramática na entrada, código na saída. 
