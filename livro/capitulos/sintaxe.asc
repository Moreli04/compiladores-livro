== Análise Sintática

.Objetivos do capítulo
____________________
Ao final deste capítulo você deverá ser capaz de:

* Entender a função do analisador sintático e como ele se integra ao resto do compilador
* Compreender o conceito de estrutura sintática
* Criar Gramáticas Livres de Contexto que capturam a estrutura sintática de linguagens
* Criar o analisador sintático para uma linguagem usando uma ferramenta geradora
____________________

A análise sintática é a etapa do compilador que ocorre após a análise léxica. 
O objetivo da análise sintática é determinar a estrutura sintática do 
código-fonte que está sendo compilado. Para isso, a análise sintática 
utiliza o fluxo de __tokens__ produzido pela análise léxica. 

No capítulo anterior mencionamos uma analogia entre compilação de um programa 
e leitura de um texto. Vimos que a análise léxica pode ser entendida como o 
agrupamento de letras individuais em palavras. Já a análise sintática é 
similar ao agrupamento de palavras para formar frases. Quando lemos, nosso 
cérebro determina automaticamente a estrutura sintática das frases, pois 
entender essa estrutura (mesmo que apenas intuitivamente) é necessário para 
compreender o significado da frase: quem é o sujeito (quem realiza a ação), 
quem é o objeto (quem sofre a ação), etc. A análise sintática em um compilador 
faz o mesmo tipo de tarefa, mas determinando a estrutura do código-fonte 
que está sendo compilado. 

Neste capítulo vamos entender em mais detalhes a função do analisador sintático 
e como ele funciona. Assim como usamos o formalismo das expressões regulares 
para guiar a criação do analisador léxico, veremos o uso das __Gramáticas Livres 
de Contexto__ para guiar a criação de analisadores sintáticos. Também veremos 
como usar o gerador bison como uma ferramenta para ajudar na criação do 
analisador sintático (assim como usamos o flex para a análise léxica).

=== Estrutura sintática

A estrutura sintática de um programa relaciona cada parte do programa com suas 
sub-partes componentes. Por exemplo, um comando +if+ completo tem três partes 
que o compõem: uma condição de teste, um comando para executar caso a condição 
seja verdadeira, e um comando para excutar caso a condição seja falsa. Quando 
o compilador identifica um +if+ em um programa, é importante que ele possa 
acessar esses componentes para poder gerar código executável para o +if+. Por 
isso, não basta apenas agrupar os caracteres em __tokens__, é preciso também 
agrupar os __tokens__ em estruturas sintáticas. 

Uma forma comum de representar a estrutura sintática é usando árvores. As 
árvores na ciência da computação são normalmente desenhadas de cabeça para 
baixo, com a raiz no topo. A raiz é um nó da árvore da qual todo o resto 
se origina. Cada nó pode ter nós filhos que aparecem abaixo dele, ligados 
por um __arco__ ou __aresta__. Uma árvore que representa a estrutura 
sintática de um programa é normalmente chamada de __árvore sintática__. 
Para o exemplo do comando condicional 
mencionado antes, a árvore sintática seria similar à mostrada na 
<<arvif1>>. Como filhos do nó +if+ (a raiz) existem três 
nós, o primeiro representando a condição, o segundo o comando para 
o caso da condição ser verdadeira (C1) e o terceiro representando 
o comando para o caso da condição ser falsa (C2). 

[[arvif1]]
.Árvore sintática para o comando condicional completo.
image::images/sintaxe/arvif1.png[scaledwidth="75%"]

O papel da análise sintática é construir uma árvore como a da <<arvif1>> 
para todas as partes de um programa. Essa árvore é incompleta pois a condição 
e os comandos C1 e C2 possuem estrutura também, e essa estrutura precisa estar 
representada na árvore completa. Para discutir a estrutura dessas partes, vamos 
ver um pouco mais sobre árvores sintáticas, especificamente sobre árvores de 
expressão. 

==== Árvores de expressão

Árvores de expressão são árvores sintáticas construídas para expressões 
aritméticas, relacionais ou lógicas. Uma expressão é formada por __operadores__, 
que designam as operações que fazem parte da expressão, e __operandos__, que 
designam os valores ou sub-expressões sobre os quais os operadores agem. 
Em uma árvore de expressão, os operadores são nós internos (nós que possuem 
filhos) e os valores básicos são folhas da árvore (nós que não possuem filhos 
e portanto aparecem ``nas pontas'' da árvore). 

Um exemplo é a expressão `2 + 3`, cuja árvore sintática é mostrada na 
Figura <<exparv1>>a. O operador é `+` e os operandos são `2` e `3`. 
Uma expressão mais complexa é `(2 + 3) * 7`, cuja árvore é mostrada 
na Figura <<exparv1>>b. O operando direito da multiplicação é o 
número `7`, mas o operando esquerdo é a sub-expressão `2 + 3`. Note 
que como a estrutura da expressão fica evidenciada pela estrutura 
da árvore, não é necessário usar parênteses na árvore para 
`(2 + 3) * 7`, apesar dessa expressão precisar de parênteses. 
Os parênteses são necessários para representar a estrutura da 
expressão como uma __string__, uma sequência linear de caracteres, 
mas não na representação em árvore. 

[[exparv1]]
.Árvore sintática para duas expressões, a) `2 + 3` b) `(2 + 3) * 7`.
image::images/sintaxe/exparv1.png[scaledwidth="85%"]

As operações em expressões são geralmente binárias, porque precisam de 
dois operandos. Algumas operações são unárias, como a negação de um número 
ou o NÃO lógico. Por isso, as árvores de expressão são compostas por nós que 
podem ter 0, 1 ou 2 filhos. Esse tipo de árvore é normalmente chamado de 
__árvore binária__. 

Em um comando como o condicional `if`, podemos pensar que o `if` é um 
operador com três operandos: condição, comando 1 e comando 2. Voltando 
à árvore para um comando condicional, digamos que um trecho do código 
do programa que está sendo processado pelo compilador é o seguinte: 

[source, c]
.Exemplo de comando condicional
----
  if (x > 2) 
    y = (x - 2) * 7;
  else
    y = x + 2 * 5;
----

Nesse comando, a condição é uma expressão relacional (de comparação), 
`x > 2`, o comando 1 é a atribuição do valor da expressão `(x - 2) * 7` 
à variável `y`, e o comando 2 é a atribuição do valor da expressão 
`x + 2 * 5` à variável `y`. A árvore para esse comando começa da forma 
que já vimos, mas inclui a estrutura das partes do comando. Essa árvore 
pode ser vista na <<arvif2>>.

[[arvif2]]
.Árvore sintática completa para um comando condicional.
image::images/sintaxe/arvif2.png[scaledwidth="75%"]

O analisador sintático de um compilador vai gerar, para o código mostrado 
antes, a árvore na <<arvif2>>. As técnicas para fazer isso serão estudadas 
no resto do capítulo. 

=== Relação com o Analisador Léxico

O analisador sintático é a etapa que vem logo após o analisador léxico no 
compilador, e isso acontece porque as etapas estão fortemente relacionadas. 
A tarefa do analisador sintático é muito mais simples de realizar partindo 
dos __tokens__ da entrada, ao invés dos caracteres isolados. 

Em teoria, como vimos no Capítulo 1, a comunicação entre o analisador léxico 
e o analisador sintático é sequencial: o analisador léxico produz toda a 
sequência de __tokens__ (criada a partir do arquivo de entrada) e passa 
essa sequência inteira para o analisador sintático. Essa ideia é mostrada 
na <<lexsin1>>. 

[[lexsin1]]
.Relação simplificada entre analisadores léxico e sintático.
image::images/sintaxe/lexsin1.png[scaledwidth="85%"]

Na prática, as duas etapas são organizadas de forma diferente nos compiladores 
reais. Não é necessário, para o analisador sintático, ter acesso a toda a 
sequência de __tokens__ para fazer a análise sintática. Na maioria dos casos, 
é possível construir a árvore sintática examinando apenas um, ou um número 
pequeno de __tokens__ de cada vez. Por isso, o mais comum é fazer com que o 
analisador sintático e o analisador léxico funcionem em conjunto, ao invés 
do léxico terminar todo seu processamento e passar o resultado para o 
sintático. Nesse arranjo, o analisador sintático está no comando, por assim 
dizer: é o analisador sintático que aciona o analisador léxico, quando 
necessário para obter o próximo __token__ da entrada. O analisador léxico 
deve manter controle sobre que partes da entrada já foram lidas e a partir 
de onde começa o próximo __token__. Essa relação é ilustrada na <<lexsin2>>, 
onde +proxtoken()+ é a função do analisador léxico que deve ser chamada para 
obter o próximo __token__; o analisador sintático chama essa função sempre 
que necessário, obtem o próximo __token__, e continua com a análise. 

[[lexsin2]]
.Relação entre analisadores léxico e sintático, na prática.
image::images/sintaxe/lexsin2.png[scaledwidth="85%"]

Um dos motivos que levaram a essa organização das duas primeiras etapas de 
análise foi que em computadores antigos era pouco provável ter memória 
suficiente para armazenar toda a sequência de __tokens__ da entrada (a não 
ser que o programa de entrada fosse pequeno), então fazia mais sentido 
processar um __token__ de cada vez. Da mesma forma, não havia memória 
suficiente para guardar toda a árvore sintática do programa. Por isso, 
os compiladores eram organizados de maneira que o analisador sintático 
comandava todo o processo de tradução: obtia o próximo __token__ do 
analisador léxico e, se fosse possível, passava uma sub-estrutura 
completa do programa (uma sub-árvore) para ser processada pelas 
etapas seguintes, já gerando o código-destino para essa parte. Em 
seguida, essa parte da árvore era descartada e o analisador sintático 
passava para a próxima parte da árvore. 

Esse tipo de organização de um compilador era conhecida como __tradução 
dirigida pela sintaxe__. Hoje em dia, com os computadores tendo quantidades 
de memória disponível muito maiores, é menos comum ver compiladores 
reais seguindo esse esquema, e muitos constroem a árvore sintática inteira 
do programa, que é passada para as etapas seguintes. Isso porque vários 
processos das etapas seguintes podem funcionar melhor se puderem ter 
acesso à árvore sintática inteira, ao invés de apenas um pedaço de cada vez.

Mas a relação entre o analisador léxico e o analisador sintático continua 
a mesma mostrada na <<lexsin2>> até hoje, mesmo tendo mais memória, pois 
para a maioria das linguagens de programação não é mesmo necessário 
acessar toda a sequência de __tokens__ da entrada. Alguns tipos de analisador 
sintático armazenam e analisam os últimos latexmath:[$n$] __tokens__, para 
latexmath:[$n$] pequeno (ao invés de analisar apenas um __token__ por vez). 
Mesmo assim, isso não muda a relação entre os analisadores léxico e sintático, 
o analisador sintático apenas chama a função de obter o próximo __token__ 
quantas vezes precisar. 

=== Gramáticas Livres de Contexto

As gramáticas formais são ferramentas para descrição de linguagens. Usamos 
aqui o adjetivo gramáticas __formais__ para distinguir de outros sentidos 
da palavra ``gramática'', por exemplo na frase 
``a gramática da língua portuguesa'', mas daqui para frente, sempre que 
usarmos a palavra ``gramática'', estaremos nos referindo às gramáticas 
formais, a não ser que haja indicação do contrário. 

As gramáticas livres de contexto estão associadas às __linguagens livres 
de contexto__. Assim como a classe das linguagens regulares é usada na 
análise léxica, a classe das linguagens livres de contexto é essencial 
para a análise sintática. Aqui não vamos nos preocupar com linguagens 
livres do contexto em geral, apenas usando as gramáticas como ferramentas 
para fazer a análise sintática. 

Uma gramática livre do contexto latexmath:[$G$] é especificada por quatro 
componentes: o conjunto de símbolos terminais latexmath:[$T$], o conjunto 
de símbolos variáveis (ou não-terminais) latexmath:[$V$], o conjunto de 
produções latexmath:[$P$] e o símbolo inicial latexmath:[$S$], sendo que 
o símbolo inicial deve ser um dos símbolos variáveis (latexmath:[$S \in V$]). 

As gramáticas funcionam como um formalismo gerador, similar às expressões 
regulares: começando pelo símbolo inicial, é possível usar as produções 
para gerar cadeias ou sentenças da linguagem que desejamos. Os símbolos 
terminais representam símbolos que aparecem na linguagem, enquanto que 
os símbolos variáveis são usados como símbolos auxiliares durante 
as substituições. Veremos alguns exemplos para tornar essas ideias 
mais claras. 

==== Exemplo: Palíndromos

O primeiro exemplo é uma linguagem bastante simples que gera cadeias 
que são palíndromos. Um __palíndromo__ é uma palavra ou frase que 
é lida da mesma forma de frente para trás e de trás para frente, como 
``roma e amor'' ou 
``socorram-me, subi no ônibus em marrocos''. Vamos trabalhar com 
palíndromos construídos com um alfabeto bastante limitado, de apenas 
dois símbolos: +a+ e +b+. Alguns palíndromos nesse alfabeto são 
+abba+, +aaa+ e +ababa+. 

Existem dois tipos de palíndromos, que podemos chamar de __palíndromos 
pares__ e __palíndromos ímpares__. Os palíndromos pares, como +abba+, 
contêm um número par de símbolos, com a segunda metade igual ao 
reverso da primeira metade. No caso de +abba+, as metades são +ab+ 
e +ba+, sendo que a segunda metade, +ba+, é o reverso da primeira, 
+ab+. Cada símbolo em uma metade deve ocorrer na outra também. 

Os palíndromos ímpares, como +ababa+, possuem um número ímpar de 
símbolos, com uma primeira parte, um símbolo do meio, e uma 
última parte; a última parte é o reverso da primeira, mas o símbolo 
do meio pode ser qualquer um. No caso do alfabeto com símbolos +a+ e
+b+, tanto +ababa+ quanto +abbba+ são palíndromos ímpares com 
primeira e última partes idênticas, mas símbolos do meio diferentes. 

[latexmath]
++++++ 
\[ \begin{aligned} 
  S & \rightarrow & aSa \\
  S & \rightarrow & bSb \\
  S & \rightarrow & a \\
  S & \rightarrow & b  
\end{aligned} \]
++++++

[latexmath]
++++++ 
\[ S \rightarrow aSa\ \vert\ bSb\ \vert\ a \ \vert\ b \]
++++++

==== Exemplo: Expressões Aritméticas

Um exemplo mais similar às linguagens de programação é uma linguagem 
simples para expressões aritméticas, como vimos no Capítulo 2. 

==== Ambiguidade

O exemplo anterior demonstra um problema importante que pode ocorrer 
com gramáticas livres de contexto: ambiguidade. 

=== Geradores de Analisadores Sintáticos

Gramática na entrada, código na saída. 

